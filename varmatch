#!/usr/bin/env python

import sys

RUN = True

author_email = 'chensun@cse.psu.edu'
versionError = 'You are using an old version of python, please upgrade to python 2.7+\n'

if sys.hexversion < 0x02070000:
    print (versionError)
    exit()

import subprocess
import argparse
import os

citation = 'Please cite our paper'

parser = argparse.ArgumentParser(epilog = citation)
parser.add_argument('-r', '--reference', help='reference vcf file path')
parser.add_argument('-q', '--query', help='query vcf file path')
parser.add_argument('-g', '--genome', help='genome sequence file path, FASTA file format')
parser.add_argument('-t', '--thread', default='1', help='thread number for parallel')
parser.add_argument('-n', '--no_normalize', action='store_true', help='if activate, program will not normalize reference vcf and query vcf file before comparing')
parser.add_argument('-d', '--direct_search', action='store_true', help='if activate, only perform direct matching')
parser.add_argument('--multi_genome', help='genome list file contain chromosome name and FASTA file absolute path')
parser.add_argument('-o', '--output', help='output directory, default is the current directory')
parser.add_argument('-v', '--visualize', help='visualize results')

# strategy for whole genome:
#   since current version of vt-normalize can not handle whole genome sequence data
#   vcfcompare split whole genome data according to chromosome detected in --whole-genome directory
args = parser.parse_args()

def shell_run(command):
    if not RUN:
        time.sleep(3.5)
        print(command)
    else:
        print(command)
        subprocess.call(command, shell=True)

def check_command(command): 
    """
    check if corresponding command available
    """
    if os.path.isfile(command):
        return True

    for cmdpath in os.environ['PATH'].split(':'):
        if os.path.isdir(cmdpath) and command in os.listdir(cmdpath):
            return True
    return False

# [todo] check vcf files, corresponding genome file should exist

# purify vcf file
def purify(input_file, output_file, genome_file):
    global check_purify_command
    if not check_purify_command and not check_command(purify_tool):
        print ('Error: can not find program: '+ purify_tool)
        print ('\t Try "make" command before execute, or contact author for support: ' + author_email)
        exit()
    else:
        check_purify_command = True
    purify_command = purify_tool + ' -i ' + input_file + ' -g ' + genome_file + ' -o ' + output_file
    shell_run(purify_command)

def normalize(input_file, output_file, genome_file):
    global check_normalize_command
    global normalize_tool
    # check if vt normalize exist
    if not check_normalize_command and not check_command(vt_tool):
        if check_command('vt normalize'):
            normalize_tool = 'vt normalize'
            check_normalize_command = True
        else:
            print ('Error: can not find program: '+ normalize_tool)
            print ('\t Try "make" command before execute, or contact author for support: ' + author_email)
            exit()
    else:
        check_normalize_command = True

    normalize_command = normalize_tool + ' ' + input_file + ' -r ' + genome_file + ' -o ' + output_file
    shell_run(normalize_command)

def pairwise_compare(reference_file, query_file, genome_file):
    global check_compare_command
    if not check_compare_command and not check_command(compare_tool):
        print ('Error: can not find program: '+ compare_tool)
        print ('\t Try "make" command before execute, or contact author for support: ' + author_email)
        exit()
    else:
        check_compare_command = True
    compare_command = compare_tool + ' -r ' + reference_file + ' -q ' + query_file + ' -g ' + genome_file

    if args.thread is not None and int(args.thread) > 1:
        compare_command += ' -t ' + args.thread
    shell_run(compare_command)

def varmatch_pairwise(reference_file, query_file, genome_file):
    ref_basename = os.path.basename(reference_file)
    que_basename = os.path.basename(query_file)
    ref_purify_file = temp_dir + '/' + ref_basename + '.purify.vcf'
    que_purify_file = temp_dir + '/' + que_basename + '.purify.vcf'
    purify(reference_file, ref_purify_file, genome_file)
    purify(query_file, que_purify_file, genome_file)
    ref_purify_norm_file = temp_dir + '/' + ref_basename + '.norm.vcf'
    que_purify_norm_file = temp_dir + '/' + que_basename + '.norm.vcf'
    if not args.no_normalize:
        normalize(ref_purify_file, ref_purify_norm_file, genome_file)
        normalize(que_purify_file, que_purify_norm_file, genome_file)
    else:
        ref_purify_norm_file = ref_purify_file
        que_purify_norm_file = que_purify_file

    pairwise_compare(ref_purify_norm_file, que_purify_norm_file, genome_file)
    

def detect_multi_genome(genome_list_file, chr_list):
    genome_dict = {}
    with open(genome_list_file) as f:
        for line in f.readlines():
            line = line.strip()
            columns = line.split()
            chr_name = columns[0]
            if chr_name in chr_list:
                genome_dict[chr_name] = columns[1]
    return genome_dict

def split_multi_genome(vcf_file, detected_chr_list):
    print ('Split variant file according to chromosomes...')
    vcf_name_dict = {}
    basename = os.path.basename(vcf_file)
    for c in detected_chr_list:
        vcf_name_dict[c] = temp_dir + '/' + basename + '.' + c + '.vcf'

    vcf_handle_dict = {}
    for c in detected_chr_list:
        vcf_handle_dict[c] = open(vcf_name_dict[c], 'w')

    with open(vcf_file) as f:
        for line in f.readlines():
            if line.startswith('#'):
                for c in detected_chr_list:
                    vcf_handle_dict[c].write(line)
                continue
            for c in detected_chr_list:
                chromosome_name = line.split('\t')[0]
                if chromosome_name == c or chromosome_name == 'chr'+c:
                    vcf_handle_dict[c].write(line)
                    break

    for c in detected_chr_list:
        vcf_handle_dict[c].close()
    return vcf_name_dict

def varmatch_multi_genome(reference_file, query_file, genome_list_file):
    #split vcf according to chromosome and then use varmatch_pairwise
    human_chromosome_list = ['1','2','3','4','5','6','7','8','9','10','11','12','13','14','15','16','17','18','19','20','21','22','X','Y']
    genome_dict = detect_multi_genome(genome_list_file, human_chromosome_list)
    detected_chr_list = list(genome_dict.keys())
    detected_chr_list.sort()
    print ('\t[Multiple genome mode]')
    print ('\tDetected genomes:')
    chr_list_string = ''
    for c in detected_chr_list:
        chr_list_string += '\t'+c
    chr_list_string += '\n'
    print (chr_list_string)
    for c in detected_chr_list:
        if not os.path.isfile(genome_dict[c]):
            print ('[Error:] Can not find genome file ' + genome_dict[c])
            exit()


    ref_vcf_dict = split_multi_genome(reference_file, detected_chr_list)
    que_vcf_dict = split_multi_genome(query_file, detected_chr_list)

    for c in detected_chr_list:
        varmatch_pairwise(ref_vcf_dict[c], que_vcf_dict[c], genome_dict[c])
    
def varmatch_multi_vcf(vcf_dir):
    print 'multiple vcf files'

def main():
    
    #initialize global variables
    global check_purify_command
    global check_normalize_command
    global check_compare_command

    global script_path
    global purify_tool
    global normalize_tool
    global vt_tool
    global compare_tool
    global output_dir
    global visual_dir
    global temp_dir
    
    check_purify_command = False
    check_normalize_command = False
    check_compare_command = True

    script_path = sys.path[0]
    purify_tool = script_path + '/purify'
    vt_tool = script_path + '/vt/vt'
    normalize_tool = script_path + '/vt/vt normalize'
    compare_tool = script_path + '/src/vm'
    output_dir = ''
    visual_dir = ''
    temp_dir = ''
    
    # create output directory
    if args.output is None or args.output == '':
        output_dir = os.getcwd() + '/output'
    else:
        output_dir = args.output
    if output_dir == '':
        output_dir = os.getcwd() + '/output'
    if not os.path.exists(output_dir):
        os.mkdir(output_dir)

    temp_dir = output_dir + '/temp'
    visual_dir = output_dir + '/visualization'

    if not os.path.exists(temp_dir):
        os.mkdir(temp_dir)

    if args.multi_genome is not None and args.multi_genome != '':
        varmatch_multi_genome(args.reference, args.query, args.multi_genome)
    else:
        varmatch_pairwise(args.reference, args.query, args.genome)

if __name__ == '__main__':
    main()


