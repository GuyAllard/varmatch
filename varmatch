#!/usr/bin/env python

import sys

author_email = 'chensun@cse.psu.edu'
versionError = 'You are using an old version of python, please upgrade to python 2.7+\n'

if sys.hexversion < 0x02070000:
    print (versionError)
    exit()

import subprocess
import argparse
import os
import sys

citation = 'Please cite our paper'

parser = argparse.ArgumentParser(epilog = citation)
parser.add_argument('-r', '--reference', required=True, help='reference vcf file path')
parser.add_argument('-q', '--query', required=True, help='query vcf file path')
parser.add_argument('-g', '--genome', required=True, help='genome sequence file path, FASTA file format')
parser.add_argument('-t', '--thread', default='1', help='thread number for parallel')
parser.add_argument('-n', '--no_normalize', action='store_true', help='if activate, program will not normalize reference vcf and query vcf file before comparing')
parser.add_argument('-d', '--direct_search', action='store_true', help='if activate, only perform direct matching')
parser.add_argument('-m', '--multi_genome', help='genome sequence file directory containing multi genome files')

# strategy for whole genome:
#   since current version of vt-normalize can not handle whole genome sequence data
#   vcfcompare split whole genome data according to chromosome detected in --whole-genome directory
args = parser.parse_args()

def shell_run(command):
    if not RNU:
        time.sleep(3.5)
        print(command)
    else:
        print(command)
        subprocess.call(command, shell=True)

def check_command(command): 
    """
    check if corresponding command available
    """
    if os.path.isfile(command):
        return True

    for cmdpath in os.environ['PATH'].split(':'):
        if os.path.isdir(cmdpath) and command in os.listdir(cmdpath):
            return True
    return False

ref_vcf_filename = args.reference
que_vcf_filename = args.query
genome_filename = args.genome
script_path = sys.path[0]
normalize_tool = script_path + '/vt/vt normalize'
compare_tool = script_path + '/vm/vm'

if not check_command(compare_tool):
    print ('Error: can not find program: '+ compare_tool)
    print ('\t Try make before execute, or contact author for service: ' + author_email)
genome_list = []
ref_vcf_list = []
que_vcf_list = []

if(not args.no_normalize):
    # check if vt normalize exist
    if not check_command(normalize_tool):
        if check_command('vt normalize'):
            normalize_tool = 'vt normalize'
        else:
            print ('Error: can not find program: '+ normalize_tool)
            print ('\t Try make before execute, or contact author for service: ' + author_email)

    ref_vcf_filename = args.reference + '.norm'
    que_vcf_filename = args.query + '.norm'
    print('Normalizing reference vcf file...')
    normalize_command = './vt/vt normalize ' + args.reference + ' -r ' + genome_filename + ' -o ' + ref_vcf_filename
    print('Normalizing query vcf file...')
    normalize_command = './vt/vt normalize'
