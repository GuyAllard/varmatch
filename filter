#!/usr/bin/env python
from sys import argv
import argparse
import math
import scipy.stats as stats

citation = 'Please cite our paper'

parser = argparse.ArgumentParser(epilog=citation)
parser.add_argument('--qu', metavar='N', help='quality number(QUAL) threshold >= N (default: N=30)', default=30)
parser.add_argument('--ab', metavar='N', help='allele balance(AB) threshold <= N%% (default: N=20)', default=20)
parser.add_argument('--fs', metavar='N', help='Fisher strand P-vale <= N (default: N=0.001)', default=0.001)
parser.add_argument('--rd', metavar='N', default=65,
                    help="average read depth=N, maximum read depth(MD) threshold >= N+4*sqrt(N) (default: N=65),"
                         " use --rd 0 to disable MD filter")
parser.add_argument('-i', metavar='input.vcf', help='input VCF file')
parser.add_argument('-o', metavar='output.vcf', help='output VCF file name(default: output.vcf)', default='output.vcf')
parser.add_argument('--homo', action='store_true', help='filter out homozygous variants')
parser.add_argument('--nf', action='store_true', help="no filters used in Heng Li review")
parser.add_argument('--snp', action='store_true', help="only want SNPs")
parser.add_argument('--indel', action='store_true', help='only want INDELs')
args = parser.parse_args()


def main():
    if len(argv) < 2:
        parser.print_help()
        exit()

    filter_homo = args.homo

    if not filter_homo:
        print ('Warning: compulsively filter out homozygous variants :)')
        filter_homo = True

    md = 0  # maximum depth filter
    if args.rd != 0:
        md = args.rd + 4 * math.sqrt(args.rd)
    else:
        print ('Warning: maximum depth(MD) filter is disabled because read depth = 0')

    output_file = open(args.o, 'w')

    with open(args.i) as input_file:
        for line in input_file.readlines():
            qu_fail = False
            ab_fail = False
            fs_fail = False
            md_fail = False
            if line.startswith('#'):
                output_file.write(line)
                continue
            columns = line.split('\t')
            if len(columns) < 8:
                print ('Warning: current variant does not contains enough info for filtering')
                continue

            ab_contain = False
            ab_pass = True
            two_alleles = False
            pv = 1.0
            rd = -1
            srf = -1
            srr = -1
            saf_list = []
            sar_list = []
            alt = columns[4]
            if ',' in alt:
                two_alleles = True

            ref = columns[3]
            is_indel = False
            for a in alt.split(','):
                if len(ref) != len(a):
                    is_indel = True

            if args.snp and is_indel:
                continue
            if args.indel and not is_indel:
                continue

            # Filter out homozygous
            if filter_homo:
                if len(columns) < 10:
                    print('Warning: variant does not contain enough info to filter homozygous variants')
                format_col = columns[8].split(':')
                gt_index = -1
                for i in range(len(format_col)):
                    if format_col[i] == 'GT':
                        gt_index = i
                if gt_index == -1:
                    print ('Warning: variant does not contain genotype info')
                    continue
                val_col = columns[9].split(':')
                gt_val = val_col[gt_index]
                gt_col = []
                if '/' in gt_val:
                    gt_col = gt_val.split('/')
                elif '|' in gt_val:
                    gt_col = gt_val.split('|')
                else:
                    print ('Warning: unrecognized genotype info')
                    continue
                if gt_col[0] == gt_col[1]:
                    continue

            if args.nf:
                output_file.write(line)
                continue

            quality_num = float(columns[5])
            # quality filter(QU)
            if quality_num < args.qu:
                qu_fail = True

            if not qu_fail:
                output_file.write(line)
                continue

            info_col = columns[7].split(';')
            for info in info_col:
                val_col = info.split('=')
                info_name = val_col[0]
                info_val = val_col[1]
                if info_name == 'AB':
                    ab_contain = True
                    if two_alleles:
                        ab_col = info_val.split(',')
                        for ab in ab_col:
                            if float(ab) > args.ab * 0.01:
                                ab_pass = False
                    else:
                        if float(info_val) > args.ab * 0.01:
                            ab_pass = False

                elif info_name == 'DP':
                    rd = int(info_val)
                elif info_name == 'SRF':
                    srf = int(info_val)
                elif info_name == 'SRR':
                    srr = int(info_val)
                elif info_name == 'SAF':
                    if two_alleles:
                        temp_list = info_val.split(',')
                        saf_list = [int(temp_list[0]), int(temp_list[1])]
                    else:
                        saf_list = [int(info_val)]
                elif info_name == 'SAR':
                    if two_alleles:
                        temp_list = info_val.split(',')
                        sar_list = [int(temp_list[0]), int(temp_list[1])]
                    else:
                        sar_list = [int(info_val)]

            # AB filter
            if not ab_contain or not ab_pass:
                ab_fail = True

            if not ab_fail:
                output_file.write(line)
                continue

            # Maximum depth(MD) filter
            if rd == -1:
                print ('Warning: current variant does not contain read depth info')
                continue
            elif rd < md:
                md_fail = True

            if not md_fail:
                output_file.write(line)
                continue
            # Fisher strand filter(FS)

            oddsratio, pv = stats.fisher_exact([[srf, srr], [saf_list[0], sar_list[0]]])
            if pv > args.fs:
                fs_fail = True

            if two_alleles:
                oddsratio, pv = stats.fisher_exact([[srf, srr], [saf_list[1], sar_list[1]]])
                if pv > args.fs:
                    fs_fail = True

            if not fs_fail:
                output_file.write(line)
                continue

    output_file.close()

if __name__ == "__main__":
    main()