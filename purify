#!/usr/bin/env python

from sys import argv
import sys
import argparse

parser = argparse.ArgumentParser()
parser.add_argument('-i', '--input', help='original vcf file')
parser.add_argument('-o', '--output', help='purified vcf file')
parser.add_argument('-g', '--genome', help='genome FASTA file')
args = parser.parse_args()

refFilename = args.genome
vcfFilename = args.input
purifyFilename = args.output

def read_reference(refFilename):
    sequence = ''
    refFile = open(refFilename)

    for line in refFile.readlines():
        if line.startswith(">"):
            continue
        line = line.strip()
        sequence += line
    refFile.close()
    return sequence

def main():
    print ('\t[input] ' + args.input)
    print ('\t[genome]' + args.genome)
    
    vcfFile = open(vcfFilename)
    purifyFile = open(purifyFilename, "w")
    
    reference = read_reference(refFilename)

    num = 0
    heteNum = 0

    for line in vcfFile.readlines():
        if line.startswith("#"):
            purifyFile.write(line)
            continue
        columns = line.split("\t")
        chrom = columns[0]
        pos = int(columns[1]) - 1
        reservedRef = columns[3]
        reservedAlt = columns[4]
        ref = columns[3].upper()
        alt = columns[4].upper()
        end = pos + len(ref)
        refSeq = reference[pos:end].upper()
        info = columns[7].split(";")[2]
        infoId = info.split("=")[1]

        if ref != refSeq:
            num += 1
            continue
        else:
            purifyFile.write(line)
    vcfFile.close()
    purifyFile.close()
    if(num == 0):
        print ('\t all variants in input vcf file match genome sequence')
    else:
        print ('\t[Warning] ' + str(num) + ' variants do not match genome sequence and removed!')
    print ('\t[output]' + args.output)

if __name__ == '__main__':
    main()
